// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cosmos/symstaking/v1/staking.proto

package types

import (
	fmt "fmt"
	types "github.com/cometbft/cometbft/abci/types"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Infraction indicates the infraction a validator commited.
type Infraction int32

const (
	// UNSPECIFIED defines an empty infraction.
	Infraction_INFRACTION_UNSPECIFIED Infraction = 0
	// DOUBLE_SIGN defines a validator that double-signs a block.
	Infraction_INFRACTION_DOUBLE_SIGN Infraction = 1
	// DOWNTIME defines a validator that missed signing too many blocks.
	Infraction_INFRACTION_DOWNTIME Infraction = 2
)

var Infraction_name = map[int32]string{
	0: "INFRACTION_UNSPECIFIED",
	1: "INFRACTION_DOUBLE_SIGN",
	2: "INFRACTION_DOWNTIME",
}

var Infraction_value = map[string]int32{
	"INFRACTION_UNSPECIFIED": 0,
	"INFRACTION_DOUBLE_SIGN": 1,
	"INFRACTION_DOWNTIME":    2,
}

func (x Infraction) String() string {
	return proto.EnumName(Infraction_name, int32(x))
}

func (Infraction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_fdb2d52f09028236, []int{0}
}

type StoreEpoch struct {
	Epoch uint64 `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
}

func (m *StoreEpoch) Reset()         { *m = StoreEpoch{} }
func (m *StoreEpoch) String() string { return proto.CompactTextString(m) }
func (*StoreEpoch) ProtoMessage()    {}
func (*StoreEpoch) Descriptor() ([]byte, []int) {
	return fileDescriptor_fdb2d52f09028236, []int{0}
}
func (m *StoreEpoch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StoreEpoch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StoreEpoch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StoreEpoch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StoreEpoch.Merge(m, src)
}
func (m *StoreEpoch) XXX_Size() int {
	return m.Size()
}
func (m *StoreEpoch) XXX_DiscardUnknown() {
	xxx_messageInfo_StoreEpoch.DiscardUnknown(m)
}

var xxx_messageInfo_StoreEpoch proto.InternalMessageInfo

func (m *StoreEpoch) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

type LastValidatorSet struct {
	Epoch   uint64                  `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	Updates []types.ValidatorUpdate `protobuf:"bytes,2,rep,name=updates,proto3" json:"updates"`
}

func (m *LastValidatorSet) Reset()         { *m = LastValidatorSet{} }
func (m *LastValidatorSet) String() string { return proto.CompactTextString(m) }
func (*LastValidatorSet) ProtoMessage()    {}
func (*LastValidatorSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_fdb2d52f09028236, []int{1}
}
func (m *LastValidatorSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LastValidatorSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LastValidatorSet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LastValidatorSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LastValidatorSet.Merge(m, src)
}
func (m *LastValidatorSet) XXX_Size() int {
	return m.Size()
}
func (m *LastValidatorSet) XXX_DiscardUnknown() {
	xxx_messageInfo_LastValidatorSet.DiscardUnknown(m)
}

var xxx_messageInfo_LastValidatorSet proto.InternalMessageInfo

func (m *LastValidatorSet) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *LastValidatorSet) GetUpdates() []types.ValidatorUpdate {
	if m != nil {
		return m.Updates
	}
	return nil
}

func init() {
	proto.RegisterEnum("cosmos.symstaking.v1.Infraction", Infraction_name, Infraction_value)
	proto.RegisterType((*StoreEpoch)(nil), "cosmos.symstaking.v1.StoreEpoch")
	proto.RegisterType((*LastValidatorSet)(nil), "cosmos.symstaking.v1.LastValidatorSet")
}

func init() {
	proto.RegisterFile("cosmos/symstaking/v1/staking.proto", fileDescriptor_fdb2d52f09028236)
}

var fileDescriptor_fdb2d52f09028236 = []byte{
	// 371 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0x4d, 0x8e, 0xda, 0x30,
	0x1c, 0xc5, 0x13, 0xfa, 0xa5, 0xba, 0x9b, 0x34, 0x45, 0x2d, 0xa2, 0x55, 0x4a, 0xb3, 0x42, 0x48,
	0x8d, 0x45, 0x7b, 0x82, 0x02, 0xa1, 0xb2, 0x44, 0x43, 0x45, 0xa0, 0x95, 0x2a, 0x55, 0xc8, 0x24,
	0x6e, 0xb0, 0x20, 0xfe, 0x47, 0xb1, 0x41, 0xe5, 0x16, 0x3d, 0x46, 0x97, 0x3d, 0x06, 0x4b, 0x96,
	0x5d, 0x8d, 0x46, 0xb0, 0x98, 0x6b, 0x8c, 0xf2, 0xc1, 0x30, 0x33, 0x62, 0x63, 0x3f, 0xfb, 0xfd,
	0xec, 0x67, 0x3f, 0x64, 0x07, 0x20, 0x63, 0x90, 0x58, 0x6e, 0x62, 0xa9, 0xe8, 0x82, 0x8b, 0x08,
	0xaf, 0xdb, 0xb8, 0x94, 0x4e, 0x92, 0x82, 0x02, 0xb3, 0x5a, 0x30, 0xce, 0x89, 0x71, 0xd6, 0xed,
	0xfa, 0x73, 0x1a, 0x73, 0x01, 0x38, 0x1f, 0x0b, 0xb0, 0x5e, 0x8d, 0x20, 0x82, 0x5c, 0xe2, 0x4c,
	0x95, 0xbb, 0x6f, 0x22, 0x80, 0x68, 0xc9, 0x30, 0x4d, 0x38, 0xa6, 0x42, 0x80, 0xa2, 0x8a, 0x83,
	0x90, 0xa5, 0xfb, 0xee, 0xec, 0x03, 0x12, 0x9a, 0xd2, 0xf8, 0x88, 0xbc, 0x56, 0x4c, 0x84, 0x2c,
	0x8d, 0xb9, 0x50, 0x98, 0xce, 0x02, 0x8e, 0xd5, 0x26, 0x61, 0xa5, 0x69, 0xdb, 0x08, 0xf9, 0x0a,
	0x52, 0xe6, 0x26, 0x10, 0xcc, 0xcd, 0x2a, 0x7a, 0xc4, 0x32, 0x51, 0xd3, 0x1b, 0x7a, 0xf3, 0xe1,
	0xa8, 0x58, 0xd8, 0x80, 0x8c, 0x01, 0x95, 0xea, 0x1b, 0x5d, 0xf2, 0x90, 0x2a, 0x48, 0x7d, 0xa6,
	0xce, 0x93, 0xa6, 0x8b, 0x9e, 0xac, 0x92, 0x90, 0x2a, 0x26, 0x6b, 0x95, 0xc6, 0x83, 0xe6, 0xb3,
	0x0f, 0x0d, 0xe7, 0x14, 0xee, 0x64, 0xe1, 0xce, 0xcd, 0x2d, 0x93, 0x1c, 0xec, 0x3c, 0xdd, 0x5e,
	0xbc, 0xd5, 0xfe, 0x5e, 0xfd, 0x6b, 0xe9, 0xa3, 0xe3, 0xd9, 0xd6, 0x4f, 0x84, 0x88, 0xf8, 0x95,
	0xd2, 0x20, 0xfb, 0xa9, 0x59, 0x47, 0x2f, 0x89, 0xd7, 0x1f, 0x7d, 0xea, 0x8e, 0xc9, 0xd0, 0x9b,
	0x4e, 0x3c, 0xff, 0xab, 0xdb, 0x25, 0x7d, 0xe2, 0xf6, 0x0c, 0xed, 0x9e, 0xd7, 0x1b, 0x4e, 0x3a,
	0x03, 0x77, 0xea, 0x93, 0xcf, 0x9e, 0xa1, 0x9b, 0xaf, 0xd0, 0x8b, 0x3b, 0xde, 0x77, 0x6f, 0x4c,
	0xbe, 0xb8, 0x46, 0xa5, 0x43, 0xb6, 0x7b, 0x4b, 0xdf, 0xed, 0x2d, 0xfd, 0x72, 0x6f, 0xe9, 0x7f,
	0x0e, 0x96, 0xb6, 0x3b, 0x58, 0xda, 0xff, 0x83, 0xa5, 0xfd, 0xc0, 0x11, 0x57, 0xf3, 0xd5, 0xcc,
	0x09, 0x20, 0xc6, 0x65, 0xb1, 0xc5, 0xf4, 0x5e, 0x86, 0x0b, 0xfc, 0xfb, 0x76, 0xcb, 0x79, 0x89,
	0xb3, 0xc7, 0x79, 0x8b, 0x1f, 0xaf, 0x03, 0x00, 0x00, 0xff, 0xff, 0x94, 0x58, 0x13, 0x93, 0x08,
	0x02, 0x00, 0x00,
}

func (m *StoreEpoch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoreEpoch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StoreEpoch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Epoch != 0 {
		i = encodeVarintStaking(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LastValidatorSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LastValidatorSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LastValidatorSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Updates) > 0 {
		for iNdEx := len(m.Updates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Updates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStaking(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Epoch != 0 {
		i = encodeVarintStaking(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintStaking(dAtA []byte, offset int, v uint64) int {
	offset -= sovStaking(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *StoreEpoch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Epoch != 0 {
		n += 1 + sovStaking(uint64(m.Epoch))
	}
	return n
}

func (m *LastValidatorSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Epoch != 0 {
		n += 1 + sovStaking(uint64(m.Epoch))
	}
	if len(m.Updates) > 0 {
		for _, e := range m.Updates {
			l = e.Size()
			n += 1 + l + sovStaking(uint64(l))
		}
	}
	return n
}

func sovStaking(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStaking(x uint64) (n int) {
	return sovStaking(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *StoreEpoch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoreEpoch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoreEpoch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LastValidatorSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LastValidatorSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LastValidatorSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Updates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStaking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Updates = append(m.Updates, types.ValidatorUpdate{})
			if err := m.Updates[len(m.Updates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStaking(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStaking
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStaking
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStaking
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStaking
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStaking        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStaking          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStaking = fmt.Errorf("proto: unexpected end of group")
)
